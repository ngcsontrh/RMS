// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SRM.Data;

#nullable disable

namespace SRM.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250315141056_AddAdminRole")]
    partial class AddAdminRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SRM.Shared.Entities.CapDeTai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CapDeTai", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.CongBo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ChiSoTacDong")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("DiaDiem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiemHoiDong")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("DongTacGias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileMinhChungBaiBao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ky")
                        .HasColumnType("int");

                    b.Property<string>("LinkBaiBao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkMinhChungLoaiQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkMinhChungTapChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoaiHoTroChiPhi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoaiQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgayCongBo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayGuiDang")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("NhaXuatBan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoiDangBaoId")
                        .HasColumnType("int");

                    b.Property<string>("PhanChiaSuDongGop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TacGiaChinh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TacGiaLienHe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tap")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenHoiDong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenTapChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThanhQuaId")
                        .HasColumnType("int");

                    b.Property<string>("Trang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NoiDangBaoId");

                    b.HasIndex("ThanhQuaId");

                    b.ToTable("CongBo", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.DeTai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CanBoThamGias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CapDeTaiId")
                        .HasColumnType("int");

                    b.Property<string>("ChuNhiem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DonViChuTriId")
                        .HasColumnType("int");

                    b.Property<string>("HoSoNghiemThu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoSoSanPham")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("KinhPhiHangNam")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("MaSo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MucTieu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgayBatDau")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayKetThuc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhanChiaSuDongGop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TongKinhPhi")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CapDeTaiId");

                    b.HasIndex("DonViChuTriId");

                    b.ToTable("DeTai", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.DonVi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DonVi", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.DonViChuTri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DonViChuTri", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.HoatDong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChuNhiem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DuongDan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileDinhKem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("KinhPhi")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("LoaiHoatDongId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgayBatDau")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayKetThuc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("NoiDung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhanChiaSuDongGop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoTiet")
                        .HasColumnType("int");

                    b.Property<int?>("SoTrang")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoaiHoatDongId");

                    b.ToTable("HoatDong", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.LoaiHoatDong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoaiHoatDong", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.NoiDangBao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NoiDangBao", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SRM.Shared.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.TacGia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChucDanh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChuyenNganh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DanToc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DonViId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GioiTinh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HocVi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaVienChuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("SoDienThoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruongDH")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DonViId");

                    b.ToTable("TacGia", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.ThanhQua", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("NgaySua")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NguoiSuaId")
                        .HasColumnType("int");

                    b.Property<int?>("NguoiTaoId")
                        .HasColumnType("int");

                    b.Property<string>("Ten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ThanhQua", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TacGiaId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TacGiaId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEXMEGGZAfbpqnVi2Ei9taVel/ImJ2UPWjQtkwQPww9Xt7Vxv2JaclNg8M4hojbRMg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin123"
                        });
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("RoleId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("SRM.Shared.Entities.CongBo", b =>
                {
                    b.HasOne("SRM.Shared.Entities.NoiDangBao", "NoiDangBao")
                        .WithMany("CongBos")
                        .HasForeignKey("NoiDangBaoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRM.Shared.Entities.ThanhQua", "ThanhQua")
                        .WithMany("CongBos")
                        .HasForeignKey("ThanhQuaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NoiDangBao");

                    b.Navigation("ThanhQua");
                });

            modelBuilder.Entity("SRM.Shared.Entities.DeTai", b =>
                {
                    b.HasOne("SRM.Shared.Entities.CapDeTai", "CapDeTai")
                        .WithMany("DeTais")
                        .HasForeignKey("CapDeTaiId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRM.Shared.Entities.DonViChuTri", "DonViChuTri")
                        .WithMany("DeTais")
                        .HasForeignKey("DonViChuTriId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CapDeTai");

                    b.Navigation("DonViChuTri");
                });

            modelBuilder.Entity("SRM.Shared.Entities.HoatDong", b =>
                {
                    b.HasOne("SRM.Shared.Entities.LoaiHoatDong", "LoaiHoatDong")
                        .WithMany("HoatDongs")
                        .HasForeignKey("LoaiHoatDongId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LoaiHoatDong");
                });

            modelBuilder.Entity("SRM.Shared.Entities.RoleClaim", b =>
                {
                    b.HasOne("SRM.Shared.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SRM.Shared.Entities.TacGia", b =>
                {
                    b.HasOne("SRM.Shared.Entities.DonVi", "DonVi")
                        .WithMany("TacGias")
                        .HasForeignKey("DonViId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DonVi");
                });

            modelBuilder.Entity("SRM.Shared.Entities.User", b =>
                {
                    b.HasOne("SRM.Shared.Entities.TacGia", "TacGia")
                        .WithMany()
                        .HasForeignKey("TacGiaId");

                    b.Navigation("TacGia");
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserClaim", b =>
                {
                    b.HasOne("SRM.Shared.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserLogin", b =>
                {
                    b.HasOne("SRM.Shared.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserRole", b =>
                {
                    b.HasOne("SRM.Shared.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRM.Shared.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SRM.Shared.Entities.UserToken", b =>
                {
                    b.HasOne("SRM.Shared.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRM.Shared.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SRM.Shared.Entities.CapDeTai", b =>
                {
                    b.Navigation("DeTais");
                });

            modelBuilder.Entity("SRM.Shared.Entities.DonVi", b =>
                {
                    b.Navigation("TacGias");
                });

            modelBuilder.Entity("SRM.Shared.Entities.DonViChuTri", b =>
                {
                    b.Navigation("DeTais");
                });

            modelBuilder.Entity("SRM.Shared.Entities.LoaiHoatDong", b =>
                {
                    b.Navigation("HoatDongs");
                });

            modelBuilder.Entity("SRM.Shared.Entities.NoiDangBao", b =>
                {
                    b.Navigation("CongBos");
                });

            modelBuilder.Entity("SRM.Shared.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SRM.Shared.Entities.ThanhQua", b =>
                {
                    b.Navigation("CongBos");
                });

            modelBuilder.Entity("SRM.Shared.Entities.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
